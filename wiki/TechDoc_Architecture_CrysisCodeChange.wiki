#summary Crysis Codebase Changes

All changes to the Crysis SDK codebase are logged at this location. All changes made in the source files are commented using the following special syntax:

{{{
// [D6] <Reason for change>
...
// [/D6]
}}}

Below, seperated by files, are the explinations for all changes made. Development team: please keep this file up-to-date with all changes made including a detailed description and the line number.

= Changes =

== Game.cpp ==

Lines 45 - 47:
{{{
// [D6] Use our game factory
#include "CD6GameFactory.h"
// [/D6]
}}}

Lines 149 - 151:
{{{
	// [D6] Use our game factory!
	InitD6GameFactory(m_pFramework);
	// [/D6]
}}}

== !GameDll.cpp ==

Lines 21 - 24:
{{{
// [D6] Include our platform too
#include <d6platform_impl.h>
#include "CD6Game.h"
// [/D6]
}}}

Lines 26 - 29:
{{{
// [D6] Set up extern
CD6CoreGlobalEnvironment CD6CoreGlobalEnvironment::m_Instance;
CD6CoreGlobalEnvironment* g_D6Core = &CD6CoreGlobalEnvironment::GetInstance();
// [/D6]
}}}

Lines 39 - 41:
{{{
		// [D6] Init our platform
		g_D6Core->D6CoreModuleInitISystem(pGameFramework->GetISystem());
		// [/D6]
}}}

Lines 45 - 49:
{{{
		// [D6] Run our game, not theirs!
		CD6Game *pGame = new ((void*)pGameBuffer) CD6Game();
		g_D6Core->pD6Game = pGame;
		return pGame;
		// [/D6]
}}}

== !GameRules.cpp ==

Lines 173 - 178:
{{{
	// [D6] This is handled by the team manager now
	assert(g_D6Core->pTeamManager);
	g_D6Core->pTeamManager->PostInitClient(channelId);
	/*for (TEntityTeamIdMap::const_iterator tit=m_entityteams.begin(); tit!=m_entityteams.end(); ++tit)
		GetGameObject()->InvokeRMIWithDependentObject(ClSetTeam(), SetTeamParams(tit->first, tit->second), eRMI_ToClientChannel, tit->first, channelId);*/
	// [/D6]
}}}

Lines 597 - 620:
{{{
		// [D6] Use team manager to get this info
		/*EntityId teamId = GetTeam(shooter);
		TPlayerTeamIdMap::const_iterator tit=m_playerteams.find(teamId);
		if (tit!=m_playerteams.end())
		{
			for (TPlayers::const_iterator it=tit->second.begin(); it!=tit->second.end(); ++it)
			{
				if(temporary)
					GetGameObject()->InvokeRMI(ClTempRadarEntity(), params, eRMI_ToClientChannel, GetChannelId(*it));
				else
					GetGameObject()->InvokeRMI(ClTaggedEntity(), params, eRMI_ToClientChannel, GetChannelId(*it));
			}
		}*/
		TeamID nTeamID = GetTeam(shooter);
		TPlayers players;
		GetTeamPlayers(nTeamID, players);
		for (TPlayers::iterator itPlayer = players.begin(); itPlayer != players.end(); itPlayer++)
		{
			if(temporary)
				GetGameObject()->InvokeRMI(ClTempRadarEntity(), params, eRMI_ToClientChannel, GetChannelId(*itPlayer));
			else
				GetGameObject()->InvokeRMI(ClTaggedEntity(), params, eRMI_ToClientChannel, GetChannelId(*itPlayer));
		}
		// [/D6]
}}}

Lines 1086 - 1095:
{{{
	// [D6] Code is handled by CD6GameRules and Team Manager
	/*TTeamIdMap::iterator it = m_teams.find(CONST_TEMP_STRING(name));
	if (it != m_teams.end())
		return it->second;

	m_teams.insert(TTeamIdMap::value_type(name, ++m_teamIdGen));
	m_playerteams.insert(TPlayerTeamIdMap::value_type(m_teamIdGen, TPlayers()));

	return m_teamIdGen;*/
	// [/D6]
}}}

Lines 1103 - 1128:
{{{
	// [D6] Code is handled by CD6GameRules and Team Manager
	//TTeamIdMap::iterator it = m_teams.find(CONST_TEMP_STRING(GetTeamName(teamId)));
	//if (it == m_teams.end())
	//	return;

	//m_teams.erase(it);

	//for (TEntityTeamIdMap::iterator eit=m_entityteams.begin(); eit != m_entityteams.end(); ++eit)
	//{
	//	if (eit->second == teamId)
	//		eit->second = 0; // 0 is no team
	//}

	//m_playerteams.erase(m_playerteams.find(teamId));
}

//------------------------------------------------------------------------
const char *CGameRules::GetTeamName(int teamId) const
{
	// [D6] Code is handled by CD6GameRules and Team Manager
	/*for (TTeamIdMap::const_iterator it = m_teams.begin(); it!=m_teams.end(); ++it)
	{
		if (teamId == it->second)
			return it->first;
	}*/
	// [/D6]
}}}

Lines 1136 - 1140:
{{{
	// [D6] Code is handled by CD6GameRules and Team Manager
	/*TTeamIdMap::const_iterator it=m_teams.find(CONST_TEMP_STRING(name));
	if (it!=m_teams.end())
		return it->second;*/
	// [/D6]
}}}

Lines 1148 - 1150:
{{{
	// [D6] Code is handled by CD6GameRules and Team Manager
	//return (int)m_teams.size();
	// [/D6]
}}}

Lines 1158 - 1182:
{{{
	// [D6] Code is handled by CD6GameRules and Team Manager
	/*if (!inGame)
	{
		TPlayerTeamIdMap::const_iterator it=m_playerteams.find(teamId);
		if (it!=m_playerteams.end())
			return (int)it->second.size();
		return 0;
	}
	else
	{
		TPlayerTeamIdMap::const_iterator it=m_playerteams.find(teamId);
		if (it!=m_playerteams.end())
		{
			int count=0;

			const TPlayers &players=it->second;
			for (TPlayers::const_iterator pit=players.begin(); pit!=players.end(); ++pit)
				if (IsPlayerInGame(*pit))
					++count;

			return count;
		}
		return 0;
	}*/
	// [/D6]
}}}

Lines 1190 - 1197:
{{{
	// [D6] Code is handled by CD6GameRules and Team Manager
	/*TPlayerTeamIdMap::const_iterator it=m_playerteams.find(teamId);
	if (it!=m_playerteams.end())
	{
		if (idx>=0 && idx<it->second.size())
			return it->second[idx];
	}*/
	// [/D6]
}}}

Lines 1205 - 1210:
{{{
	// [D6] Code is handled by CD6GameRules and Team Manager
	/*players.resize(0);
	TPlayerTeamIdMap::const_iterator it=m_playerteams.find(teamId);
	if (it!=m_playerteams.end())
		players=it->second;*/
	// [/D6]
}}}

Lines 1216 - 1275:
{{{
	// [D6] Code is handled by CD6GameRules and Team Manager
	//if (!gEnv->bServer )
	//{
	//	assert(0);
	//	return;
	//}

	//int oldTeam = GetTeam(id);
	//if (oldTeam==teamId)
	//	return;

	//TEntityTeamIdMap::iterator it=m_entityteams.find(id);
	//if (it!=m_entityteams.end())
	//	m_entityteams.erase(it);

	//bool isplayer=m_pActorSystem->GetActor(id)!=0;
	//if (isplayer && oldTeam)
	//{
	//	TPlayerTeamIdMap::iterator pit=m_playerteams.find(oldTeam);
	//	assert(pit!=m_playerteams.end());
	//	stl::find_and_erase(pit->second, id);
	//}
	//if (teamId)
	//{
	//	m_entityteams.insert(TEntityTeamIdMap::value_type(id, teamId));

	//	if (isplayer)
	//	{
	//		TPlayerTeamIdMap::iterator pit=m_playerteams.find(teamId);
	//		assert(pit!=m_playerteams.end());
	//		pit->second.push_back(id);

	//		UpdateObjectivesForPlayer(GetChannelId(id), teamId);
	//	}
	//}

	//if(isplayer)
	//	ReconfigureVoiceGroups(id,oldTeam,teamId);

	//if (gEnv->bClient)
	//	m_pRadio->SetTeam(GetTeamName(teamId));

	//ScriptHandle handle(id);
	//CallScript(m_serverStateScript, "OnSetTeam", handle, teamId);

	//if (gEnv->bClient)
	//{
	//	ScriptHandle handle(id);
	//	CallScript(m_clientStateScript, "OnSetTeam", handle, teamId);
	//}
	//
	//// if this is a spawn group, update it's validity
	//if (m_spawnGroups.find(id)!=m_spawnGroups.end())
	//	CheckSpawnGroupValidity(id);

	//GetGameObject()->InvokeRMIWithDependentObject(ClSetTeam(), SetTeamParams(id, teamId), eRMI_ToRemoteClients, id);

	//if (IEntity *pEntity=m_pEntitySystem->GetEntity(id))
	//	m_pGameplayRecorder->Event(pEntity, GameplayEvent(eGE_ChangedTeam, 0, (float)teamId));
	// [/D6]
}}}

Lines 1281 - 1285:
{{{
	// [D6] Code is handled by CD6GameRules and Team Manager
	/*TEntityTeamIdMap::const_iterator it = m_entityteams.find(entityId);
	if (it != m_entityteams.end())
		return it->second;*/
	// [/D6]
}}}

Lines 1950 - 1961:
{{{
		// [D6] Let team manager handle this
		/*TTeamIdEntityIdMap::iterator next;
		for (TTeamIdEntityIdMap::iterator dit=m_teamdefaultspawns.begin(); dit!=m_teamdefaultspawns.end(); dit=next)
		{
			next=dit;
			++next;
			if (dit->second==groupId)
				m_teamdefaultspawns.erase(dit);
		}*/
		assert(g_D6Core->pTeamManager);
		g_D6Core->pTeamManager->RemoveDefaultSpawnGroupFromTeams(groupId);
		// [/D6]
}}}

Lines 2038 - 2045:
{{{
	// [D6] Code is handled by CD6GameRules and Team Manager
	/*TTeamIdEntityIdMap::iterator it=m_teamdefaultspawns.find(teamId);
	
	if (it!=m_teamdefaultspawns.end())
		it->second=spawnGroupId;
	else
		m_teamdefaultspawns.insert(TTeamIdEntityIdMap::value_type(teamId, spawnGroupId));*/
	// [/D6]
}}}

Lines 2051 - 2055:
{{{
	// [D6] Code is handled by CD6GameRules and Team Manager
	/*TTeamIdEntityIdMap::iterator it=m_teamdefaultspawns.find(teamId);
	if (it!=m_teamdefaultspawns.end())
		return it->second;*/
	// [/D6]
}}}

Lines 2343 - 2356:
{{{
					// [D6] Use team manager
					/*TPlayerTeamIdMap::const_iterator tit=m_playerteams.find(teamId);
					if (tit!=m_playerteams.end())
					{
						for (TPlayers::const_iterator it=tit->second.begin(); it!=tit->second.end(); ++it)
							GetGameObject()->InvokeRMIWithDependentObject(ClChatMessage(), params, eRMI_ToClientChannel, *it, GetChannelId(*it));
					}*/
					TPlayers players;
					GetTeamPlayers(teamId, players);
					for (TPlayers::const_iterator itPlayer = players.begin(); itPlayer != players.end(); itPlayer++)
					{
						GetGameObject()->InvokeRMIWithDependentObject(ClChatMessage(), params, eRMI_ToClientChannel, *itPlayer, GetChannelId(*itPlayer));
					}
					// [/D6]
}}}

Lines 2522 - 2540:
{{{
	// [D6] Use team manager
	/*CGameRules *pGameRules=g_pGame->GetGameRules();
	if (!pGameRules->m_entityteams.empty())
	{
		CryLogAlways("// Teams //");
		for (TTeamIdMap::const_iterator tit=pGameRules->m_teams.begin(); tit!=pGameRules->m_teams.end(); ++tit)
		{
			CryLogAlways("Team: %s  (id: %d)", tit->first.c_str(), tit->second);
			for (TEntityTeamIdMap::const_iterator eit=pGameRules->m_entityteams.begin(); eit!=pGameRules->m_entityteams.end(); ++eit)
			{
				if (eit->second==tit->second)
				{
					IEntity *pEntity=gEnv->pEntitySystem->GetEntity(eit->first);
					CryLogAlways("    -> Entity: %s  class: %s  (eid: %d %08x)", pEntity->GetName(), pEntity->GetClass()->GetName(), pEntity->GetId(), pEntity->GetId());
				}
			}
		}
	}*/
	// [/D6]
}}}

Lines 2558 - 2576:
{{{
	// [D6] Let team manager handle this
	/*CGameRules *pGameRules=g_pGame->GetGameRules();
	if (!pGameRules->m_objectives.empty())
	{
		CryLogAlways("// Teams //");
		for (TTeamIdMap::const_iterator tit=pGameRules->m_teams.begin(); tit!=pGameRules->m_teams.end(); ++tit)
		{
			if (TObjectiveMap *pObjectives=pGameRules->GetTeamObjectives(tit->second))
			{
				for (TObjectiveMap::const_iterator it=pObjectives->begin(); it!=pObjectives->end(); ++it)
					CryLogAlways("  -> Objective: %s  teamId: %d  status: %s  (eid: %d %08x)", it->first.c_str(), tit->second,
						status[CLAMP(it->second.status, 0, CHUDMissionObjective::LAST)], it->second.entityId, it->second.entityId);
			}
		}
	}*/

	assert(g_D6Core->pTeamManager);
	g_D6Core->pTeamManager->CmdDebugObjectives(pArgs, status);
	// [/D6]
}}}

Lines 3034 - 3048:
{{{
				// [D6] Use team's player map
				/*TPlayerTeamIdMap::const_iterator tit=m_playerteams.find(teamId);
				if (tit!=m_playerteams.end())
				{
					for (TPlayers::const_iterator it=tit->second.begin(); it!=tit->second.end(); ++it)
						GetGameObject()->InvokeRMIWithDependentObject(ClRadioMessage(), params, eRMI_ToClientChannel, *it, GetChannelId(*it));
				}*/
				TPlayers players;
				GetTeamPlayers(teamId, players);
				for (TPlayers::iterator itPlayer = players.begin(); itPlayer != players.end();
					itPlayer++)
				{
					GetGameObject()->InvokeRMIWithDependentObject(ClRadioMessage(), params, eRMI_ToClientChannel, *itPlayer, GetChannelId(*itPlayer));
				}
				// [/D6]
}}}

Lines 3124 - 3129:
{{{
	// [D6] Following containers are no longer part of the GameRules class, migrated to Team Manager
	//s->AddContainer(m_teams);
	//s->AddContainer(m_entityteams);
	//s->AddContainer(m_teamdefaultspawns);
	//s->AddContainer(m_playerteams);
	// [/D6]
}}}

Lines 3143 - 3148:
{{{
	// [D6] Migrated to Team Manager
	/*for (TTeamIdMap::iterator iter = m_teams.begin(); iter != m_teams.end(); ++iter)
		s->Add(iter->first);*/
	/*for (TPlayerTeamIdMap::iterator iter = m_playerteams.begin(); iter != m_playerteams.end(); ++iter)
		s->AddContainer(iter->second);*/
	// [/D6]
}}}

== !GameRules.h ==

Lines 38 - 136:
{{{
// [D6] Altered to work with Team Manager
//#define GAMERULES_INVOKE_ON_TEAM(team, rmi, params)	\
//{ \
//	TPlayerTeamIdMap::const_iterator _team=m_playerteams.find(team); \
//	if (_team!=m_playerteams.end()) \
//	{ \
//	const TPlayers &_players=_team->second; \
//	for (TPlayers::const_iterator _player=_players.begin();_player!=_players.end(); ++_player) \
//	GetGameObject()->InvokeRMI(rmi, params, eRMI_ToClientChannel, GetChannelId(*_player)); \
//	} \
//} \
//
//#define GAMERULES_INVOKE_ON_TEAM_NOLOCAL(team, rmi, params)	\
//{ \
//	TPlayerTeamIdMap::const_iterator _team=m_playerteams.find(team); \
//	if (_team!=m_playerteams.end()) \
//	{ \
//	const TPlayers &_players=_team->second; \
//	for (TPlayers::const_iterator _player=_players.begin();_player!=_players.end(); ++_player) \
//	GetGameObject()->InvokeRMI(rmi, params, eRMI_ToClientChannel|eRMI_NoLocalCalls, GetChannelId(*_player)); \
//	} \
//} \
//
//
//#define ACTOR_INVOKE_ON_TEAM(team, rmi, params)	\
//{ \
//	TPlayerTeamIdMap::const_iterator _team=m_playerteams.find(team); \
//	if (_team!=playerteams.end()) \
//	{ \
//	const TPlayers &_players=_team.second; \
//	for (TPlayers::const_iterator _player=_players.begin();_player!=_players.end(); ++_player) \
//		{ \
//		CActor *pActor=GetActorByEntityId(*_player); \
//		if (pActor) \
//		pActor->GetGameObject()->InvokeRMI(rmi, params, eRMI_ToClientChannel, GetChannelId(*_player)); \
//		} \
//	} \
//} \
//
//
//#define ACTOR_INVOKE_ON_TEAM_NOLOCAL(team, rmi, params)	\
//{ \
//	TPlayerTeamIdMap::const_iterator _team=m_playerteams.find(team); \
//	if (_team!=playerteams.end()) \
//	{ \
//	const TPlayers &_players=_team.second; \
//	for (TPlayers::const_iterator _player=_players.begin();_player!=_players.end(); ++_player) \
//		{ \
//		CActor *pActor=GetActorByEntityId(*_player); \
//		if (pActor) \
//		pActor->GetGameObject()->InvokeRMI(rmi, params, eRMI_ToClientChannel|eRMI_NoLocalCalls, GetChannelId(*_player)); \
//		} \
//	} \
//} \

#define GAMERULES_INVOKE_ON_TEAM(team, rmi, params)	\
{ \
	CGameRules::TPlayers _players; \
	GetTeamPlayers(team, _players); \
	for (CGameRules::TPlayers::const_iterator _player = _players.begin(); _player != _players.end(); _player++) \
		GetGameObject()->InvokeRMI(rmi, params, eRMI_ToClientChannel, GetChannelId(*_player)); \
}

#define GAMERULES_INVOKE_ON_TEAM_NOLOCAL(team, rmi, params)	\
{ \
	CGameRules::TPlayers _players; \
	GetTeamPlayers(team, _players); \
	for (CGameRules::TPlayers::const_iterator _player = _players.begin(); _player != _players.end(); _player++) \
		GetGameObject()->InvokeRMI(rmi, params, eRMI_ToClientChannel|eRMI_NoLocalCalls, GetChannelId(*_player)); \
} \


#define ACTOR_INVOKE_ON_TEAM(team, rmi, params)	\
{ \
	CGameRules::TPlayers _players; \
	GetTeamPlayers(team, _players); \
	for (CGameRules::TPlayers::const_iterator _player = _players.begin(); _player != _players.end(); _player++) \
	{ \
		CActor *pActor=GetActorByEntityId(*_player); \
		if (pActor) \
			pActor->GetGameObject()->InvokeRMI(rmi, params, eRMI_ToClientChannel, GetChannelId(*_player)); \
		} \
	} \
} \


#define ACTOR_INVOKE_ON_TEAM_NOLOCAL(team, rmi, params)	\
{ \
	CGameRules::TPlayers _players; \
	GetTeamPlayers(team, _players); \
	for (CGameRules::TPlayers::const_iterator _player = _players.begin(); _player != _players.end(); _player++) \
	{ \
		CActor *pActor=GetActorByEntityId(*_player); \
		if (pActor) \
			pActor->GetGameObject()->InvokeRMI(rmi, params, eRMI_ToClientChannel|eRMI_NoLocalCalls, GetChannelId(*_player)); \
		} \
	} \
} \
// [/D6]
}}}

Lines 1043 - 1049:
{{{
	// [D6] Following items are no longer part of the GameRules class, migrated to Team Manager
	//TTeamIdMap			m_teams;
	//TEntityTeamIdMap		m_entityteams;
	//TTeamIdEntityIdMap	m_teamdefaultspawns;
	//TPlayerTeamIdMap		m_playerteams;
	//int					m_teamIdGen;
	// [/D6]
}}}

== !GameRulesClientServer.cpp ==

Lines 495 - 524:
{{{
	// [D6] Code is handled in team manager now
	assert(g_D6Core->pTeamManager);
	bool bResult = g_D6Core->pTeamManager->SetTeam(params.teamId, params.entityId);
	/*int oldTeam = GetTeam(params.entityId);
	if (oldTeam==params.teamId)
		return true;

	TEntityTeamIdMap::iterator it=m_entityteams.find(params.entityId);
	if (it!=m_entityteams.end())
		m_entityteams.erase(it);

	bool isplayer=m_pActorSystem->GetActor(params.entityId)!=0;
	if (isplayer && oldTeam)
	{
		TPlayerTeamIdMap::iterator pit=m_playerteams.find(oldTeam);
		assert(pit!=m_playerteams.end());
		stl::find_and_erase(pit->second, params.entityId);
	}

	if (params.teamId)
	{
		m_entityteams.insert(TEntityTeamIdMap::value_type(params.entityId, params.teamId));
		if (isplayer)
		{
			TPlayerTeamIdMap::iterator pit=m_playerteams.find(params.teamId);
			assert(pit!=m_playerteams.end());
			pit->second.push_back(params.entityId);
		}
	}*/
	// [/D6]
}}}

[TechDoc_Architecture Back]