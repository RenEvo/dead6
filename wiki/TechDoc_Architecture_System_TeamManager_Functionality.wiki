#summary System Feature - Team Manager - Functionality

[TechDoc_Architecture_System_TeamManager Back]

= Functionality =

== !STeamHarvesterDef ==
Below are the methods defined in the !STeamHarvesterDef object.

=== *_ Constructor _* ===
*Purpose*:
Undefined.

*Arguments*:
void

*Returns*:
void


=== *_ !CheckFlag _* ===
*Purpose*:
Returns TRUE if the given flag is set

*Arguments*:
 * _nFlag_ - `[In]` Flag to check

*Returns*:
TRUE if flag is set, FALSE if not


=== *_ !SetFlag _* ===
*Purpose*:
Set the flag specified

*Arguments*:
 * _bOn_ - `[In]` TRUE to turn it on, FALSE to clear it
 * _nFlag_ - `[In]` Flag to set

*Returns*:
TRUE on success, FALSE on failure


== !STeamDef ==
Below are the methods defined in the !STeamDef object.

== !TeamManager ==
Below are the methods defined in the !TeamManager interface.

=== *_ Destructor _* ===
*Purpose*:
Undefined.

*Arguments*:
void

*Returns*:
void


=== *_ Initialize _* ===
*Purpose*:
One-time initialization at the start

*Arguments*:
void

*Returns*:
void


=== *_ Shutdown _* ===
*Purpose*:
One-time clean up at the end

*Arguments*:
void

*Returns*:
void


=== *_ Reset _* ===
*Purpose*:
Clears all loaded teams and prepares for new team definitions

*Arguments*:
void

*Returns*:
void

*Note*:
Should be called at the start of a level load

=== *_ !ResetGame _* ===
*Purpose*:
Called when the game is reset, such as when the editor game starts up

*Arguments*:
 * _bGameStart_ - `[In]` TRUE if game is starting, FALSE if game is stopping

*Returns*:
void


=== *_ Update _* ===
*Purpose*:
Update the teams

*Arguments*:
 * _bHaveFocus_ - `[In]` TRUE if game has focus
 * _nUpdateFlags_ - `[In]` Update flags

*Returns*:
void


=== *_ !GetMemoryStatistics _* ===
*Purpose*:
Used by memory management

*Arguments*:
 * _s_ - `[In]` Cry Sizer object

*Returns*:
void


=== *_ !PostInitClient _* ===
*Purpose*:
Called when the local client has finished loading for net synch issues

*Arguments*:
 * _nChannelID_ - `[In]` Network channel ID

*Returns*:
void


=== *_ !CmdDebugTeams _* ===
*Purpose*:
Console command used to debug teams

*Arguments*:
 * _pArgs_ - `[In]` Console command arguments

*Returns*:
void

*Note*:
Delegated from GameRules

=== *_ !CmdDebugObjectives _* ===
*Purpose*:
Console command used to debug team objectives

*Arguments*:
 * _pArgs_ - `[In]` Console command arguments
 * _status_ - `[In]` HUD Objectives status

*Returns*:
void

*Note*:
Delegated from GameRules

=== *_ !LoadTeams _* ===
*Purpose*:
Load team definitions contained in an XML node

*Arguments*:
 * _pNode_ - `[In]` XML node to extract from

*Returns*:
TRUE on success or FALSE on error

*Note*:
Used in conjunction with CNCRules parsing

=== *_ !CreateTeam _* ===
*Purpose*:
Create a team definition

*Arguments*:
 * _pTeamNode_ - `[In]` XML Node containing team data

*Returns*:
ID of the team created or TEAMID_INVALID on error


=== *_ !RemoveTeam _* ===
*Purpose*:
Remove a team and force anyone on that team onto another.

*Arguments*:
 * _nTeamID_ - `[In]` ID of the team to destroy

*Returns*:
void


=== *_ !GetTeamName _* ===
*Purpose*:
Returns the name of the given team

*Arguments*:
 * _nTeamID_ - `[In]` ID of the team

*Returns*:
void


=== *_ !GetTeamId _* ===
*Purpose*:
Returns the ID of the team with the given ID

*Arguments*:
 * _szName_ - `[In]` Name to search for

*Returns*:
void


=== *_ !GetTeamCount _* ===
*Purpose*:
Returns how many teams are defined

*Arguments*:
void

*Returns*:
void


=== *_ !GetTeamPlayerCount _* ===
*Purpose*:
Returns how many players belong to the given team

*Arguments*:
 * _bInGame_ - `[In]` TRUE to count only players who are currently in the game
 * _nTeamID_ - `[In]` ID of the team

*Returns*:
void


=== *_ !GetTeamPlayer _* ===
*Purpose*:
Returns the player in the given slot on the specified team.

*Arguments*:
 * _nTeamID_ - `[In]` ID of the team
 * _nidx_ - `[In]` Index into the player list

*Returns*:
the ID of the entity in the slot


=== *_ !GetTeamPlayers _* ===
*Purpose*:
Returns the list of players on the given team

*Arguments*:
 * _nTeamID_ - `[In]` ID of the team
 * _players_ - `[Out]` List of players

*Returns*:
void


=== *_ !SetTeam _* ===
*Purpose*:
Put a player on the given team

*Arguments*:
 * _nEntityID_ - `[In]` ID of the entity to put on the team
 * _nTeamID_ - `[In]` ID of the team to use

*Returns*:
TRUE if the team was changed


=== *_ !GetTeam _* ===
*Purpose*:
Get the team an entity belongs to

*Arguments*:
 * _nEntityID_ - `[In]` ID of the entity

*Returns*:
the ID of the team the entity belongs to


=== *_ !SetTeamDefaultSpawnGroup _* ===
*Purpose*:
Sets the team's default spawn group

*Arguments*:
 * _nSpawnGroupId_ - `[In]` ID of spawn group to use
 * _nTeamID_ - `[In]` ID of team

*Returns*:
void


=== *_ !GetTeamDefaultSpawnGroup _* ===
*Purpose*:
Get the spawn group ID being used by the given team

*Arguments*:
 * _nTeamID_ - `[In]` ID of team to get

*Returns*:
ID of the spawn group


=== *_ !RemoveTeamDefaultSpawnGroup _* ===
*Purpose*:
Removes the spawn group being used by the given ID

*Arguments*:
 * _nTeamID_ - `[In]` ID of team

*Returns*:
void


=== *_ !RemoveDefaultSpawnGroupFromTeams _* ===
*Purpose*:
Remove the spawn group from any team that is using it

*Arguments*:
 * _nSpawnGroupId_ - `[In]` ID of spawn group to remove

*Returns*:
void


=== *_ !IsValidTeam _* ===
*Purpose*:
Returns TRUE if the specified team ID or name is valid

*Arguments*:
 * _nID_ - `[In]` Team ID
 * _szName_ - `[In]` Name of the team

*Returns*:
void

*Note*:
Using the name is slower than the ID!

=== *_ !IsPlayerTeam _* ===
*Purpose*:
Returns TRUE if the specified team can be used by a player (for joining rights)

*Arguments*:
 * _nID_ - `[In]` Team ID
 * _szName_ - `[In]` Name of the team

*Returns*:
void

*Note*:
Using the name is slower than the ID!

=== *_ !CreateTeamHarvester _* ===
*Purpose*:
Create a harvester for the team

*Arguments*:
 * _bUseFactory_ - `[In]` TRUE to create the harvester through the vehicle factory (if present)
 * _fDir_ - `[In]` Direction to face if not created through the vehicle factory
 * _nID_ - `[In]` Team ID
 * _ppDef_ - `[Out]` Harvester defintion (optional)
 * _vPos_ - `[In]` Where to create the harvester at if not though the vehicle factory

*Returns*:
ID of harvester or HARVESTERID_INVALID on error


=== *_ !GetTeamHarvesterInfo _* ===
*Purpose*:
Return map of harvesters owned by the given team

*Arguments*:
 * _list_ - `[Out]` List of harvesters
 * _nID_ - `[In]` Team ID

*Returns*:
TRUE on success


=== *_ !GetTeamHarvester _* ===
*Purpose*:
Return the harvestere definition

*Arguments*:
 * _nHarvesterID_ - `[In]` ID of the harvester
 * _nID_ - `[In]` Owning team ID

*Returns*:
STeamHarvesterDef object or NULL on error


=== *_ !RemakeTeamHarvester _* ===
*Purpose*:
Remakes the entity for the given harvester

*Arguments*:
 * _bLeaveEntity_ - `[In]` TRUE if old entity should be left in the world
 * _pDef_ - `[In]` Harvester definition

*Returns*:
TRUE on success, FALSE on error


=== *_ !GetChannelTeam _* ===
*Purpose*:
Get the team that owns the given channel

*Arguments*:
 * _nChannelID_ - `[In]` Channel ID

*Returns*:
id of Team


=== *_ !GetTeamChannelCount _* ===
*Purpose*:
Returns how many channels a team has

*Arguments*:
 * _bInGame_ - `[In]` TRUE to only count those in the game
 * _nTeamID_ - `[In]` team ID

*Returns*:
void


== !ScriptBind_TeamManager ==
Below are the methods defined in the !ScriptBind_TeamManager module.

=== *_ Constructor _* ===
*Purpose*:
Undefined.

*Arguments*:
void

*Returns*:
void


=== *_ Destructor _* ===
*Purpose*:
Undefined.

*Arguments*:
void

*Returns*:
void


=== *_ !AttachTo _* ===
*Purpose*:
Attaches binding to a team manager

*Arguments*:
void

*Returns*:
void


=== *_ !RegisterGlobals _* ===
*Purpose*:
Registers any global values to the script system

*Arguments*:
void

*Returns*:
void


=== *_ !RegisterMethods _* ===
*Purpose*:
Registers any binding methods to the script system

*Arguments*:
void

*Returns*:
void


= Sub Modules =

== !STeamDef ==
Description: This structure is used to represent a defined team. It contains information including the team's unique ID, the team's name, attribute and script properties.

Member Variables:
 * nID - Team's unique ID
 * nSpawnGroupID - Default spawn group ID used by team
 * nFlags - Team flags (see ETeamFlags)
 * szName - Name of the team
 * szLongName - Long name of the team
 * szScript - Lua script used by the team
 * !PlayerList - List of player IDs who are on the team
 * !DefHarvester - Default Harvester definition inherited by all harvesters created on the team
 * !HarvesterList - List of Harvesters owned by the team


== !STeamHarvesterDef ==
Description: This structure is used to represent a harvester owned by a team. It contains information including the harvester's unique ID, the owning team's ID, the vehicle entity's ID, attributes and helper properties. A reference to this definition is contained in each [TechDoc_Architecture_Game_HarvesterFlow Harvester Controller].

Member Variables:
 * fCapacity - How much tiberium the harvester can hold
 * fBuildTime - How long it takes for the harvester to be rebuilt once destroyed
 * fLoadRate - How long it takes the harvester to load one piece of tiberium
 * fUnloadRate - How long it takes the harvester to unload one piece of tiberium
 * fPayloadTimer - Used to record how long the harvester has been loading/unloading
 * fPayload - How much tiberium is currently in the tank
 * ucFlags - Harvester flags
 * vCreateAt - Where harvester is created at if it doesn't go through the vehicle factory
 * fCreateDir - Degree of facing when harvester is created
 * nTeamID - Owning team's ID
 * nID - Harvester's unique ID
 * nEntityID - Vehicle entity ID used to represent the harvester
 * szEntityName - Vehicle entity name to use to represent the harvester
 * SignalQueue - Queue of signals that need processing

== !ETeamFlags ==
Below are the list of valid Team Flags and their meanings:

 * TEAM_FLAG_ISPLAYERTEAM - Set if player can be on this team, or strictly AI

[TechDoc_Architecture_System_TeamManager Back]