#summary System Feature - Team Manager

= Overview =
The Team Manager module is responsible for managing the defined teams. Teams are defined per level, with a Lua script and XML file that define the team's attributes and behavior. Each team is given a unique identifier ID that is used in conjunction with the Base Management code, as well as the game logic including damage rules and purchase rules.

The current team management code present in the Crysis codebase is stripped out and migrated into the Team Manager module. As such, some functionality present in the module is there for backwards compatibility.

A Script Bind also exists that allows the Script System to communicate with the Team Manager.

= Functionality =

== !TeamManager ==
Below are the methods defined in the !TeamManager interface.

=== *_ Destructor _* ===
*Purpose*:
Undefined.

*Arguments*:
void

*Returns*:
void


=== *_ Initialize _* ===
*Purpose*:
One-time initialization at the start

*Arguments*:
void

*Returns*:
void


=== *_ Shutdown _* ===
*Purpose*:
One-time clean up at the end

*Arguments*:
void

*Returns*:
void


=== *_ Reset _* ===
*Purpose*:
Clears all loaded teams and prepares for new team definitions

*Arguments*:
void

*Returns*:
void

*Note*:
Should be called at the start of a level load

=== *_ !GetMemoryStatistics _* ===
*Purpose*:
Used by memory management

*Arguments*:
 * _s_ - `[In]` Cry Sizer object

*Returns*:
void


=== *_ !PostInitClient _* ===
*Purpose*:
Called when the local client has finished loading for net synch issues

*Arguments*:
 * _nChannelID_ - `[In]` Network channel ID

*Returns*:
void


=== *_ !CmdDebugTeams _* ===
*Purpose*:
Console command used to debug teams

*Arguments*:
 * _pArgs_ - `[In]` Console command arguments

*Returns*:
void

*Note*:
Delegated from GameRules

=== *_ !CmdDebugObjectives _* ===
*Purpose*:
Console command used to debug team objectives

*Arguments*:
 * _pArgs_ - `[In]` Console command arguments
 * _status_ - `[In]` HUD Objectives status

*Returns*:
void

*Note*:
Delegated from GameRules

=== *_ !CreateTeam _* ===
*Purpose*:
Create a team definition

*Arguments*:
 * _szTeam_ - `[In]` Team to load (looks for its .XML file)

*Returns*:
ID of the team created or TEAMID_INVALID on error


=== *_ !RemoveTeam _* ===
*Purpose*:
Remove a team and force anyone on that team onto another.

*Arguments*:
 * _nTeamID_ - `[In]` ID of the team to destroy

*Returns*:
void


=== *_ !GetTeamName _* ===
*Purpose*:
Returns the name of the given team

*Arguments*:
 * _nTeamID_ - `[In]` ID of the team

*Returns*:
void


=== *_ !GetTeamId _* ===
*Purpose*:
Returns the ID of the team with the given ID

*Arguments*:
 * _szName_ - `[In]` Name to search for

*Returns*:
void


=== *_ !GetTeamCount _* ===
*Purpose*:
Returns how many teams are defined

*Arguments*:
void

*Returns*:
void


=== *_ !GetTeamPlayerCount _* ===
*Purpose*:
Returns how many players belong to the given team

*Arguments*:
 * _bInGame_ - `[In]` TRUE to count only players who are currently in the game
 * _nTeamID_ - `[In]` ID of the team

*Returns*:
void


=== *_ !GetTeamPlayer _* ===
*Purpose*:
Returns the player in the given slot on the specified team.

*Arguments*:
 * _nTeamID_ - `[In]` ID of the team
 * _nidx_ - `[In]` Index into the player list

*Returns*:
the ID of the entity in the slot


=== *_ !GetTeamPlayers _* ===
*Purpose*:
Returns the list of players on the given team

*Arguments*:
 * _nTeamID_ - `[In]` ID of the team
 * _players_ - `[Out]` List of players

*Returns*:
void


=== *_ !SetTeam _* ===
*Purpose*:
Put a player on the given team

*Arguments*:
 * _nEntityID_ - `[In]` ID of the entity to put on the team
 * _nTeamID_ - `[In]` ID of the team to use

*Returns*:
TRUE if the team was changed


=== *_ !GetTeam _* ===
*Purpose*:
Get the team an entity belongs to

*Arguments*:
 * _nEntityID_ - `[In]` ID of the entity

*Returns*:
the ID of the team the entity belongs to


=== *_ !SetTeamDefaultSpawnGroup _* ===
*Purpose*:
Sets the team's default spawn group

*Arguments*:
 * _nSpawnGroupId_ - `[In]` ID of spawn group to use
 * _nTeamID_ - `[In]` ID of team

*Returns*:
void


=== *_ !GetTeamDefaultSpawnGroup _* ===
*Purpose*:
Get the spawn group ID being used by the given team

*Arguments*:
 * _nTeamID_ - `[In]` ID of team to get

*Returns*:
ID of the spawn group


=== *_ !RemoveTeamDefaultSpawnGroup _* ===
*Purpose*:
Removes the spawn group being used by the given ID

*Arguments*:
 * _nTeamID_ - `[In]` ID of team

*Returns*:
void


=== *_ !RemoveDefaultSpawnGroupFromTeams _* ===
*Purpose*:
Remove the spawn group from any team that is using it

*Arguments*:
 * _nSpawnGroupId_ - `[In]` ID of spawn group to remove

*Returns*:
void


=== *_ !IsValidTeam _* ===
*Purpose*:
Returns TRUE if the specified team ID or name is valid

*Arguments*:
 * _nID_ - `[In]` Team ID
 * _szName_ - `[In]` Name of the team

*Returns*:
void

*Note*:
Using the name is slower than the ID!


== !ScriptBind_TeamManager ==
Below are the methods defined in the !ScriptBind_TeamManager module.

=== *_ Constructor _* ===
*Purpose*:
Undefined.

*Arguments*:
void

*Returns*:
void


=== *_ Destructor _* ===
*Purpose*:
Undefined.

*Arguments*:
void

*Returns*:
void


=== *_ !AttachTo _* ===
*Purpose*:
Attaches binding to a team manager

*Arguments*:
void

*Returns*:
void


= Sub Modules =

== !STeamDef ==
Description: This structure is used to represent a defined team. It contains information including the team's unique ID, the team's name, attribute and script properties.

Member Variables:
 * nID - Team's unique ID
 * nSpawnGroupID - Default spawn group ID used by team
 * szName - Name of the team
 * szScript - Lua script used by the team
 * szXML - XML file that defines the team
 * !PlayerList - List of player IDs who are on the team


= Creating a Team =
Based on the [TechDoc_Architecture_Game_CNCRules CNCRules] XML file, each team listed in the Teams section is created through the team manager. The system first looks for the XML file of the listed team in the map's Teams\XML folder. If not found, the system looks for it in the Game\Scripts\Teams\XML folder. Therefore, if listed:

{{{
<Team>GDI</Team>
}}}

Then the system will look first for "<map>\Teams\XML\GDI.xml" and then "Game\Scripts\Teams\XML\GDI.xml". The attributes contained in this file are used to define the team, including the name, Lua script, and other properties. To view the contents of this file, see [TechDoc_Architecture_Game_CNCTeams here].


[TechDoc_Architecture Back]